/* Krzysztof Abramowicz (http://krzysztofabramowicz.com/, k.j.abramowicz@gmail.com)
 *   project: HyperVision — Architectonic Rendering Engine
 *             └─Development stage one (DS1)
 *                └─Core modules
 *   toolset: ISO C '99 + OpenGL 3.3 + GLUT 2.6
 *   content: HV::Shader module header template (text/x-h.hvcpp)
 *   version: 1.0 OS
 *
 *	This file has to be processed by HyperVision C PreProcessor (hvCPP)
 *  in order to produce C public header for the module (inc/matrix.h).
 */

#ifndef HV_DS1_SHADER_H
#define HV_DS1_SHADER_H

#include "opengl.h"
#include "output.h"

#pragma hv private

	#define HV_NAME_SIZE 64
	#define HV_INFO_SIZE 2048

	#pragma hv vpath("./src/shaders")
	#pragma hv merge("plain.vs.glsl")
	#pragma hv merge("plain.fs.glsl")
	#pragma hv merge("phong.vs.glsl")
	#pragma hv merge("phong.fs.glsl")

	#pragma hv table(shader.ptr)

#pragma hv public

	#pragma hv table(shader.enum)

	typedef struct {
		GLuint
			id, vs, fs,
			colorUniLoc,
			mdelMatrixUniLoc,
			viewMatrixUniLoc,
			projMatrixUniLoc;
	} prog_t;

	prog_t hvCreateProgram(enum vs_e vertShader, enum fs_e fragShader);
	void hvProgramInfo(prog_t* prog);
	void hvDeleteProgram(prog_t* prog);

#endif /* defined HV_DS1_SHADER_H */

